use brec :: * ; # [block] # [derive (Debug)] # [allow (non_snake_case , non_camel_case_types)] struct ruoyGtnGmQLRWPDXTeizftddASsRsQ { cwInrBbzpolPOvrRQTrHjKlWnEvrLS : i128 , NmJegSGxlEGlFkMqTmjeaohXECbxsB : f32 , gPblWnLDkQFMnflptFyKRKeMUbCfQF : i16 , GcYbtzMCHnRKExvRXCXNpsvfRbNDqu : [u8 ; 42usize] , zaedcefVveksQdvsSEAdiJMVOyNAYx : u32 , CUxFEcnUbddDZOFHgbZsTorJhAzfUw : u64 , PsSOyLUudwKSOpiZeXcAcrwGTMTPai : i32 , ANmeSjPqNSSBbxvRCZUyhekJomkeiT : bool , jsdjaDyhVjCxSNdAtzWKELRfestTnU : f32 , } # [block] # [derive (Debug)] # [allow (non_snake_case , non_camel_case_types)] struct TLugmyiDCGwQGTUmCnXxFYsmEaCTrA { ErYLEqvwEzpQGZKgCUEcOhUPyEwcun : i64 , ZTWlLkKllHGYLegJsPVSYrTHvJVYBb : u32 , jPWHByOHnHiahutRUIPjnTDplmEMiA : i8 , tIHmbqfiRQHVkAFZVUEjcBPfVZSXFW : i16 , } # [block] # [derive (Debug)] # [allow (non_snake_case , non_camel_case_types)] struct joMopOGCwZdNbvaRPoypIiZgPeoDNi { ZLzRhZbHojbmuGhmxAQawfgDTGwpCh : i32 , saCvYLmboPRFRnhWZGwsIlxxSXOFQs : i8 , iFSMGMzQBYuvnuLSYULBZbkYzSqKgk : f64 , EmqvUBUHCMuCmDEFQRIAjjrzIIrBxn : u16 , bJShiyiXRGudidHfHOYhFlFDlzRkVL : i8 , ePFYTYqusSNaYizgQmFtQgLRpCqEdc : u32 , } # [block] # [derive (Debug)] # [allow (non_snake_case , non_camel_case_types)] struct RsBQFgRGCgVMlvHFIpnoCkmHeLHtAJ { vYHZlLcEQBawYEPgSiehYWeTsMnlAR : u64 , NEjkMfAqzdEhabsZJeYQmSXVUZvzDL : f32 , VZIBtwNCifHwynDeFVRVSYlKRipBVe : i64 , LvWPorYYeyIXxNrpslvKFeNWitReYE : f32 , hPpYYdjlxAQdPXYpLqDYijOGIUZBnp : i64 , IDvQoEgYNoMKSPShitmpvKTFzkqBVN : i32 , sqmwktmuFdgngqZAcdjNTiGLJywLhf : f64 , TxeXUcxuGNQdUrhWBjinSbbFNdznuW : i16 , jaiQNtIzlNHdxBuWhZRwBwYkuUELTn : i128 , hBWmKFbRCAKQJwQSHRlrAUawfJCwzL : i16 , gDmIhSSBgVOcCTLDiuenzmyKtNMytA : u32 , BxEaxnkEnxOQFpirKtSCYnkKxGCGpL : bool , retwTIgNQreRGHrcNoqRFEhttjgONl : f64 , } # [block] # [derive (Debug)] # [allow (non_snake_case , non_camel_case_types)] struct PfAHDDJRruDvLmnnWVZpTkwsuIoGox { hydJlbrhvuXcSfQYGzwhuIlbHOPdsJ : i64 , cilbCzbHwAXAoTbgMLAXWPsncJbHiC : i128 , kUJPoJDwFYuVuMKOphjjiuPzdqYloM : u64 , fwScapaFUgvfpGwXcZSohUDAHpdBFB : i8 , DATgktwKIjAiApZQBRGSQBwTxZsgGt : i128 , WSUpSFGyFUZLaIUTwTnqZQepwixcGv : i8 , VsyRXWcpLkPriRrxNlUAtkTsPJWxJl : u16 , JdMIRVVXlknmGZukUMZtKEoTZnqrDN : [u8 ; 63usize] , } # [block] # [derive (Debug)] # [allow (non_snake_case , non_camel_case_types)] struct eKQgnTtyjupotwTFiMkNczxbfPqbmG { YOzThDjAhOvkLnuAtEIUnoxDkVGNwD : [u8 ; 54usize] , WawjCwXvHiLtflsgiOROjHkbhcHBRE : u128 , tIDQkhkbVsXqjSnZuvPxWTsxhDZmeS : i32 , HAHGjUymxTBYwCIVaCYHFhRPEkQZmQ : i128 , TegvyHjFsOKAdcLHUxuAbqfjPUPiic : i64 , FcQoQWSMQLpNHWCtnFbxWEWLnXOWCM : u32 , zShuTXPZcxDZUeZdOGAPocWFRUCRJd : bool , hfVultgzNfeXZmldJocjcbtEwtUQGZ : i128 , doSswyHjAvAgQkFYrbjgBZwSSrNiVC : u8 , oHBQUxYyflSKEwcZDywlIdjOmYmDpY : f64 , yCtboLGeIsILqUkgRMZzWMiOZIdQjH : u128 , yJApZuUmydLBXDcKgwcpmghasrkZPZ : i64 , SJukuPAsgcdRGIEkggqBezEObQMitb : i16 , UMpCmXxHgfAPCzBDCkAnRpHyJwtXYT : f64 , ZkNOkIQDNglHbzgRSTnwLCJMMnVcEt : u8 , lADBRNvhkkkPKXnDRdqyhqDudOhdXJ : i128 , } brec :: include_generated ! () ; fn main () { let bykltvVAXCPTkNjlplJPzEqPKIuhMe = Packet :: new (vec ! [Block :: RuoyGtnGmQLRWPDXTeizftddASsRsQ (ruoyGtnGmQLRWPDXTeizftddASsRsQ { cwInrBbzpolPOvrRQTrHjKlWnEvrLS : - 120876435497263827070770805412382508055i128 , NmJegSGxlEGlFkMqTmjeaohXECbxsB : 0.000000000000000000000000000000000000003952416f32 , gPblWnLDkQFMnflptFyKRKeMUbCfQF : 4009i16 , GcYbtzMCHnRKExvRXCXNpsvfRbNDqu : [252u8 , 77u8 , 90u8 , 208u8 , 222u8 , 105u8 , 94u8 , 32u8 , 21u8 , 184u8 , 153u8 , 230u8 , 130u8 , 24u8 , 176u8 , 41u8 , 148u8 , 237u8 , 147u8 , 234u8 , 120u8 , 178u8 , 155u8 , 25u8 , 210u8 , 106u8 , 27u8 , 44u8 , 189u8 , 250u8 , 115u8 , 81u8 , 167u8 , 110u8 , 117u8 , 93u8 , 5u8 , 222u8 , 96u8 , 235u8 , 181u8 , 245u8 ,] , zaedcefVveksQdvsSEAdiJMVOyNAYx : 3222801549u32 , CUxFEcnUbddDZOFHgbZsTorJhAzfUw : 17888120765347888412u64 , PsSOyLUudwKSOpiZeXcAcrwGTMTPai : 347660793i32 , ANmeSjPqNSSBbxvRCZUyhekJomkeiT : false , jsdjaDyhVjCxSNdAtzWKELRfestTnU : - 0f32 , }) , Block :: TLugmyiDCGwQGTUmCnXxFYsmEaCTrA (TLugmyiDCGwQGTUmCnXxFYsmEaCTrA { ErYLEqvwEzpQGZKgCUEcOhUPyEwcun : - 2110176810095649621i64 , ZTWlLkKllHGYLegJsPVSYrTHvJVYBb : 2598459595u32 , jPWHByOHnHiahutRUIPjnTDplmEMiA : 38i8 , tIHmbqfiRQHVkAFZVUEjcBPfVZSXFW : 17674i16 , }) , Block :: JoMopOGCwZdNbvaRPoypIiZgPeoDNi (joMopOGCwZdNbvaRPoypIiZgPeoDNi { ZLzRhZbHojbmuGhmxAQawfgDTGwpCh : 10910508i32 , saCvYLmboPRFRnhWZGwsIlxxSXOFQs : - 74i8 , iFSMGMzQBYuvnuLSYULBZbkYzSqKgk : 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003976807911180997f64 , EmqvUBUHCMuCmDEFQRIAjjrzIIrBxn : 782u16 , bJShiyiXRGudidHfHOYhFlFDlzRkVL : - 56i8 , ePFYTYqusSNaYizgQmFtQgLRpCqEdc : 4010382424u32 , }) , Block :: RsBQFgRGCgVMlvHFIpnoCkmHeLHtAJ (RsBQFgRGCgVMlvHFIpnoCkmHeLHtAJ { vYHZlLcEQBawYEPgSiehYWeTsMnlAR : 8302690614872868332u64 , NEjkMfAqzdEhabsZJeYQmSXVUZvzDL : - 0.00000000000000000000000050395477f32 , VZIBtwNCifHwynDeFVRVSYlKRipBVe : - 4243192412281512390i64 , LvWPorYYeyIXxNrpslvKFeNWitReYE : - 0f32 , hPpYYdjlxAQdPXYpLqDYijOGIUZBnp : 6191927739634800021i64 , IDvQoEgYNoMKSPShitmpvKTFzkqBVN : 1722875732i32 , sqmwktmuFdgngqZAcdjNTiGLJywLhf : - 0f64 , TxeXUcxuGNQdUrhWBjinSbbFNdznuW : 25592i16 , jaiQNtIzlNHdxBuWhZRwBwYkuUELTn : - 151537321882901453976160156675609047427i128 , hBWmKFbRCAKQJwQSHRlrAUawfJCwzL : 16145i16 , gDmIhSSBgVOcCTLDiuenzmyKtNMytA : 3148360801u32 , BxEaxnkEnxOQFpirKtSCYnkKxGCGpL : true , retwTIgNQreRGHrcNoqRFEhttjgONl : - 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006580068899667602f64 , }) , Block :: PfAHDDJRruDvLmnnWVZpTkwsuIoGox (PfAHDDJRruDvLmnnWVZpTkwsuIoGox { hydJlbrhvuXcSfQYGzwhuIlbHOPdsJ : - 2007387386508410392i64 , cilbCzbHwAXAoTbgMLAXWPsncJbHiC : - 99090903536221431591771818323890419270i128 , kUJPoJDwFYuVuMKOphjjiuPzdqYloM : 681933364857779358u64 , fwScapaFUgvfpGwXcZSohUDAHpdBFB : 21i8 , DATgktwKIjAiApZQBRGSQBwTxZsgGt : 7722819514009082561429519139481647369i128 , WSUpSFGyFUZLaIUTwTnqZQepwixcGv : 33i8 , VsyRXWcpLkPriRrxNlUAtkTsPJWxJl : 3874u16 , JdMIRVVXlknmGZukUMZtKEoTZnqrDN : [137u8 , 94u8 , 51u8 , 95u8 , 207u8 , 44u8 , 136u8 , 106u8 , 66u8 , 117u8 , 5u8 , 151u8 , 198u8 , 175u8 , 121u8 , 222u8 , 119u8 , 230u8 , 43u8 , 202u8 , 79u8 , 140u8 , 113u8 , 142u8 , 108u8 , 43u8 , 82u8 , 43u8 , 81u8 , 228u8 , 5u8 , 254u8 , 155u8 , 95u8 , 55u8 , 58u8 , 48u8 , 43u8 , 210u8 , 248u8 , 69u8 , 40u8 , 198u8 , 77u8 , 29u8 , 95u8 , 246u8 , 88u8 , 194u8 , 81u8 , 210u8 , 13u8 , 240u8 , 14u8 , 22u8 , 21u8 , 50u8 , 48u8 , 150u8 , 184u8 , 64u8 , 2u8 , 148u8 ,] , }) , Block :: EKQgnTtyjupotwTFiMkNczxbfPqbmG (eKQgnTtyjupotwTFiMkNczxbfPqbmG { YOzThDjAhOvkLnuAtEIUnoxDkVGNwD : [234u8 , 78u8 , 145u8 , 135u8 , 167u8 , 47u8 , 169u8 , 149u8 , 180u8 , 150u8 , 33u8 , 116u8 , 216u8 , 143u8 , 115u8 , 155u8 , 20u8 , 199u8 , 24u8 , 147u8 , 230u8 , 56u8 , 54u8 , 153u8 , 173u8 , 139u8 , 139u8 , 223u8 , 12u8 , 61u8 , 5u8 , 13u8 , 75u8 , 168u8 , 85u8 , 251u8 , 183u8 , 138u8 , 14u8 , 217u8 , 166u8 , 144u8 , 153u8 , 161u8 , 142u8 , 200u8 , 192u8 , 75u8 , 132u8 , 213u8 , 128u8 , 14u8 , 55u8 , 253u8 ,] , WawjCwXvHiLtflsgiOROjHkbhcHBRE : 169698265247431158791370690971904117888u128 , tIDQkhkbVsXqjSnZuvPxWTsxhDZmeS : 1320645695i32 , HAHGjUymxTBYwCIVaCYHFhRPEkQZmQ : 148518489416682045914997633723066472648i128 , TegvyHjFsOKAdcLHUxuAbqfjPUPiic : - 1854522680586929896i64 , FcQoQWSMQLpNHWCtnFbxWEWLnXOWCM : 3586208758u32 , zShuTXPZcxDZUeZdOGAPocWFRUCRJd : true , hfVultgzNfeXZmldJocjcbtEwtUQGZ : 95606679915308692205029621208500443668i128 , doSswyHjAvAgQkFYrbjgBZwSSrNiVC : 127u8 , oHBQUxYyflSKEwcZDywlIdjOmYmDpY : 0f64 , yCtboLGeIsILqUkgRMZzWMiOZIdQjH : 40276469523600375672250982281162841011u128 , yJApZuUmydLBXDcKgwcpmghasrkZPZ : 7166809923515911165i64 , SJukuPAsgcdRGIEkggqBezEObQMitb : 28390i16 , UMpCmXxHgfAPCzBDCkAnRpHyJwtXYT : - 2586090217271403000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f64 , ZkNOkIQDNglHbzgRSTnwLCJMMnVcEt : 64u8 , lADBRNvhkkkPKXnDRdqyhqDudOhdXJ : - 148198033129262077957387949218254438848i128 , }) ,] , None) ; let mut packets = vec ! [bykltvVAXCPTkNjlplJPzEqPKIuhMe ,] ; let mut buffer : Vec < u8 > = Vec :: new () ; for packet in packets . iter_mut () { packet . write_all (& mut buffer) . expect ("Data is written") ; } let mut restored : Vec < Packet > = Vec :: new () ; let mut inner = std :: io :: BufReader :: new (std :: io :: Cursor :: new (buffer)) ; let mut reader : PacketBufReader < _ , std :: io :: BufWriter < Vec < u8 >> > = PacketBufReader :: new (& mut inner) ; loop { match reader . read () { Ok (next) => match next { NextPacket :: Found (packet) => restored . push (packet) , NextPacket :: NotFound => { } NextPacket :: NotEnoughData (_needed) => { } NextPacket :: NoData => { break ; } NextPacket :: Skipped => { } } , Err (err) => { panic ! ("{err}") ; } } ; } println ! ("Has been read: {} from {}" , restored . len () , packets . len ()) ; }